require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe MessagesController do

  def sendgrid_message_params(message)
    p = { :headers => message.mail.header.encoded, 
          :to => message.mail.header[:to].to_s, 
          :from => message.mail.header[:from].to_s, 
          :charsets => "{\"to\":\"UTF-8\",\"html\":\"ISO-8859-1\",\"subject\":\"UTF-8\",\"from\":\"UTF-8\",\"text\":\"ISO-8859-1\"}" 
    }
    p[:text] = message.mail.text_part.body if message.mail.text_part.present?
    p[:html] = message.mail.html_part.body if message.mail.html_part.present?
    p
  end

  describe "POST sendgrid_create" do
    describe "with valid sendgrid params" do

      it "assigns a newly created message as @message" do
        post :sendgrid_create, sendgrid_message_params(FactoryGirl.build(:message))
        assigns(:message).should be
      end

      it "should hit the interface for a check request" do
        EmailInterfaceController.should_receive(:dispatch)
        post :sendgrid_create, sendgrid_message_params(FactoryGirl.build(:message, :to_email => "check@#{Multiplex::Application::Domain}"))
        assigns(:message).should be
      end

    end

    #describe "with invalid params" do
      #it "assigns a newly created but unsaved message as @message" do
        #Message.stub(:new).with({'these' => 'params'}) { mock_message(:save => false) }
        #post :create, :message => {'these' => 'params'}
        #assigns(:message).should be(mock_message)
      #end

      #it "re-renders the 'new' template" do
        #Message.stub(:new) { mock_message(:save => false) }
        #post :create, :message => {}
        #response.should render_template("new")
      #end
    #end
  end
end
